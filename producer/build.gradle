buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "http://repo.spring.io/snapshot" }
		maven { url "http://repo.spring.io/milestone" }
		maven { url "http://repo.spring.io/release" }
	}

	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE"
		classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:${findProperty('verifierVersion') ?: verifierVersion}"
	}
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'spring-cloud-contract'
apply plugin: 'maven-publish'

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${project.findProperty('BOM_VERSION') ?: BOM_VERSION}"
	}
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile("org.springframework.cloud:spring-cloud-starter-stream-rabbit")

	testCompile("org.springframework.cloud:spring-cloud-starter-contract-verifier")
	testCompile("org.springframework.cloud:spring-cloud-stream-test-support")
	testCompile(project(":beer-common"))
}

contracts {
	packageWithBaseClasses = 'com.example'
	basePackageForTests = 'com.example'
}

task checkMappings(dependsOn: ["generateWireMockClientStubs", project(":beer-common").build]) {
	doLast {
		assert file("${project(":producer").buildDir}/stubs/mappings/beer/rest/shouldGrantABeerIfOldEnough.json").exists()
	}
}

task checkGeneratedTests(dependsOn: ["generateContractTests", project(":beer-common").build]) {
	doLast {
		String root = "${project(":producer").buildDir}/generated-test-sources/contracts/com/example/beer/"
		assert file("${root}/RestTest.java").exists()
		assert file("${root}/MessagingTest.java").exists()
	}
}

test {
	testLogging {
		exceptionFormat = 'full'
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}
